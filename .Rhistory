install.packages('h2o')
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'Exited',
training_frame =as.h2o(training_set),
activation = 'Rectifier',
hidden = c[6,6],
epochs = 100,
train_samples_per_iteration = -2)#number of hidden layer
#Artificial Neural Network
setwd("C://Vivek//Learnings//Machine Learning Udemy")
#Read Data Set
dataset = read.csv("Churn_Modelling.csv")
dataset = dataset[,4:14]
#Enclode factoring variable
#encoding categorical variables
dataset$Geography = as.numeric(factor(dataset$Geography, levels = c('France','Spain','Germany'), labels = c(1,2,3)))
dataset$Gender = as.numeric(factor(dataset$Gender, levels = c('Female','Male'), labels = c(1,2)))
#Diving data into trainingset and test set
#install.packages('caTools')
library(caTools)
set.seed(123)
split= sample.split(dataset$Exited, SplitRatio=0.80)
training_set = subset(dataset, split==TRUE)
test_set = subset(dataset, split==FALSE)
#feature scaling
training_set[-11] = scale(training_set[-11])
test_set[-11]=scale(test_set[-11])
classifier = h2o.deeplearning(y = 'Exited',
training_frame =as.h2o(training_set),
activation = 'Rectifier',
hidden = c[6,6],
epochs = 100,
train_samples_per_iteration = -2)#number of hidden layer
classifier = h2o.deeplearning(y = 'Exited',
training_frame =as.h2o(training_set),
activation = 'Rectifier',
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)#number of hidden layer
prob_pred = h2o.predict(classifier, newdata = test_set[-11])
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
prob_pred
y_pred = (prob_pred > 0.5)
y_pred
y_pred = as.vector(y_pred)
prob_pred as.vector(prob_pred)
prob_pred =as.vector(prob_pred)
# Artificial Neural Network
# Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[4:14]
# Encoding the categorical variables as factors
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-11] = scale(training_set[-11])
test_set[-11] = scale(test_set[-11])
# Fitting ANN to the Training set
# install.packages('h2o')
library(h2o)
h2o.init(nthreads = -1)
model = h2o.deeplearning(y = 'Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(5,5),
epochs = 100,
train_samples_per_iteration = -2)
# Predicting the Test set results
y_pred = h2o.predict(model, newdata = as.h2o(test_set[-11]))
y_pred = (y_pred > 0.5)
y_pred = as.vector(y_pred)
# Making the Confusion Matrix
cm = table(test_set[, 11], y_pred)
# h2o.shutdown()
# Artificial Neural Network
# Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[4:14]
# Encoding the categorical variables as factors
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-11] = scale(training_set[-11])
test_set[-11] = scale(test_set[-11])
# Fitting ANN to the Training set
# install.packages('h2o')
library(h2o)
h2o.init(nthreads = -1)
model = h2o.deeplearning(y = 'Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(5,5),
epochs = 100,
train_samples_per_iteration = -2)
# Predicting the Test set results
y_pred = h2o.predict(model, newdata = as.h2o(test_set[-11]))
y_pred = (y_pred > 0.5)
y_pred = as.vector(y_pred)
# Artificial Neural Network
# Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[4:14]
# Encoding the categorical variables as factors
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-11] = scale(training_set[-11])
test_set[-11] = scale(test_set[-11])
# Fitting ANN to the Training set
# install.packages('h2o')
library(h2o)
h2o.init(nthreads = -1)
model = h2o.deeplearning(y = 'Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(5,5),
epochs = 100,
train_samples_per_iteration = -2)
# Predicting the Test set results
y_pred = h2o.predict(model, newdata = as.h2o(test_set[-11]))
y_pred = (y_pred > 0.5)
y_pred = as.vector(y_pred)
# Artificial Neural Network
# Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[4:14]
# Encoding the categorical variables as factors
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-11] = scale(training_set[-11])
test_set[-11] = scale(test_set[-11])
# Fitting ANN to the Training set
# install.packages('h2o')
library(h2o)
h2o.init(nthreads = -1)
model = h2o.deeplearning(y = 'Exited',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(5,5),
epochs = 100,
train_samples_per_iteration = -2)
# Predicting the Test set results
y_pred = h2o.predict(model, newdata = as.h2o(test_set[-11]))
as.vector(y_pred)
#Artificial Neural Network
setwd("C://Vivek//Learnings//Machine Learning Udemy")
#Read Data Set
dataset = read.csv("Churn_Modelling.csv")
dataset = dataset[,4:14]
#Enclode factoring variable
#encoding categorical variables
dataset$Geography = as.numeric(factor(dataset$Geography, levels = c('France','Spain','Germany'), labels = c(1,2,3)))
dataset$Gender = as.numeric(factor(dataset$Gender, levels = c('Female','Male'), labels = c(1,2)))
#Diving data into trainingset and test set
#install.packages('caTools')
library(caTools)
set.seed(123)
split= sample.split(dataset$Exited, SplitRatio=0.80)
training_set = subset(dataset, split==TRUE)
test_set = subset(dataset, split==FALSE)
#feature scaling
training_set[-11] = scale(training_set[-11])
test_set[-11]=scale(test_set[-11])
#Fitting Logistic Regression to the training set
#Fitting ANN to the training set
install.packages('h2o')
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'Exited',
training_frame =as.h2o(training_set),
activation = 'Rectifier',
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)#number of hidden layer
#Predicting the Test set results
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
#Artificial Neural Network
setwd("C://Vivek//Learnings//Machine Learning Udemy")
#Read Data Set
dataset = read.csv("Churn_Modelling.csv")
dataset = dataset[,4:14]
#Enclode factoring variable
#encoding categorical variables
dataset$Geography = as.numeric(factor(dataset$Geography, levels = c('France','Spain','Germany'), labels = c(1,2,3)))
dataset$Gender = as.numeric(factor(dataset$Gender, levels = c('Female','Male'), labels = c(1,2)))
#Diving data into trainingset and test set
#install.packages('caTools')
library(caTools)
set.seed(123)
split= sample.split(dataset$Exited, SplitRatio=0.80)
training_set = subset(dataset, split==TRUE)
test_set = subset(dataset, split==FALSE)
#feature scaling
training_set[-11] = scale(training_set[-11])
test_set[-11]=scale(test_set[-11])
#Fitting Logistic Regression to the training set
#Fitting ANN to the training set
#install.packages('h2o')
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'Exited',
training_frame =as.h2o(training_set),
activation = 'Rectifier',
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)#number of hidden layer
#Predicting the Test set results
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
#Making the Confusion Matrix
cm = table(test_set[,3], y_pred)
cm
#Artificial Neural Network
setwd("C://Vivek//Learnings//Machine Learning Udemy")
#Read Data Set
dataset = read.csv("Churn_Modelling.csv")
dataset = dataset[,4:14]
#Enclode factoring variable
#encoding categorical variables
dataset$Geography = as.numeric(factor(dataset$Geography, levels = c('France','Spain','Germany'), labels = c(1,2,3)))
dataset$Gender = as.numeric(factor(dataset$Gender, levels = c('Female','Male'), labels = c(1,2)))
#Diving data into trainingset and test set
#install.packages('caTools')
library(caTools)
set.seed(123)
split= sample.split(dataset$Exited, SplitRatio=0.80)
training_set = subset(dataset, split==TRUE)
test_set = subset(dataset, split==FALSE)
#feature scaling
training_set[-11] = scale(training_set[-11])
test_set[-11]=scale(test_set[-11])
#Fitting Logistic Regression to the training set
#Fitting ANN to the training set
#install.packages('h2o')
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'Exited',
training_frame =as.h2o(training_set),
activation = 'Rectifier',
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)#number of hidden layer
#Predicting the Test set results
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
cm = table(test_set[,11], y_pred)
cm
accuracy = (cm[0,0]+cm[1,1])/2000
accuracy
cm[1,1]
accuracy = (cm[1,1] +cm[2,2])/2000
h2o.shutdown()
